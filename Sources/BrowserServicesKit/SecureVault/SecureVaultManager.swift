//
//  SecureVaultManager.swift
//  DuckDuckGo
//
//  Copyright Â© 2021 DuckDuckGo. All rights reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

import Foundation
import Combine
import Common

public enum AutofillType {
    case password
    case card
    case identity
}

public struct AutofillData {
    public let identity: SecureVaultModels.Identity?
    public let credentials: SecureVaultModels.WebsiteCredentials?
    public let creditCard: SecureVaultModels.CreditCard?
    public let automaticallySavedCredentials: Bool
}

public protocol SecureVaultManagerDelegate: SecureVaultErrorReporting {
    
    func secureVaultManagerIsEnabledStatus(_: SecureVaultManager) -> Bool

    func secureVaultManager(_: SecureVaultManager,
                            promptUserToStoreAutofillData data: AutofillData,
                            withTrigger trigger: AutofillUserScript.GetTriggerType?)

    func secureVaultManager(_: SecureVaultManager,
                            promptUserToAutofillCredentialsForDomain domain: String,
                            withAccounts accounts: [SecureVaultModels.WebsiteAccount],
                            withTrigger trigger: AutofillUserScript.GetTriggerType,
                            completionHandler: @escaping (SecureVaultModels.WebsiteAccount?) -> Void)

    func secureVaultManager(_: SecureVaultManager,
                            promptUserWithGeneratedPassword password: String,
                            completionHandler: @escaping (Bool) -> Void)

    func secureVaultManager(_: SecureVaultManager, didAutofill type: AutofillType, withObjectId objectId: String)

    // swiftlint:disable:next identifier_name
    func secureVaultManager(_: SecureVaultManager, didRequestAuthenticationWithCompletionHandler: @escaping (Bool) -> Void)

    func secureVaultManager(_: SecureVaultManager, didRequestCreditCardsManagerForDomain domain: String)

    func secureVaultManager(_: SecureVaultManager, didRequestIdentitiesManagerForDomain domain: String)

    func secureVaultManager(_: SecureVaultManager, didRequestPasswordManagerForDomain domain: String)

    func secureVaultManager(_: SecureVaultManager, didReceivePixel: AutofillUserScript.JSPixel)

}

public protocol PasswordManager: AnyObject {

    var isEnabled: Bool { get }
    var name: String { get }
    var isLocked: Bool { get }

    func accountsFor(domain: String, completion: @escaping ([SecureVaultModels.WebsiteAccount], Error?) -> Void)
    func cachedAccountsFor(domain: String) -> [SecureVaultModels.WebsiteAccount]
    func cachedWebsiteCredentialsFor(domain: String, username: String) -> SecureVaultModels.WebsiteCredentials?
    func websiteCredentialsFor(accountId: String, completion: @escaping (SecureVaultModels.WebsiteCredentials?, Error?) -> Void)
    func websiteCredentialsFor(domain: String, completion: @escaping ([SecureVaultModels.WebsiteCredentials], Error?) -> Void)

    func askToUnlock(completionHandler: @escaping () -> Void)

}

public class SecureVaultManager {

    public weak var delegate: SecureVaultManagerDelegate?
    
    private let vault: SecureVault?

    // Third party password manager
    private let passwordManager: PasswordManager?

    // This property can be removed once all platforms will search for partial account matches as the default expected behaviour.
    private let includePartialAccountMatches: Bool

    public let tld: TLD?

    // Keeps track of partial account created from autogenerated credentials (Private Email + Pwd)
    public var partialAccount: SecureVaultModels.WebsiteAccount?

    public lazy var autofillWebsiteAccountMatcher: AutofillWebsiteAccountMatcher? = {
        guard let tld = tld else { return nil }
        return AutofillWebsiteAccountMatcher(autofillUrlMatcher: AutofillDomainNameUrlMatcher(),
                                             tld: tld)
    }()

    public init(vault: SecureVault? = nil,
                passwordManager: PasswordManager? = nil,
                includePartialAccountMatches: Bool = false,
                tld: TLD? = nil) {
        self.vault = vault
        self.passwordManager = passwordManager
        self.includePartialAccountMatches = includePartialAccountMatches
        self.tld = tld
    }

}

// Later these catches should check if it is an auth error and call the delegate to ask for user authentication.
extension SecureVaultManager: AutofillSecureVaultDelegate {


    public func autofillUserScript(_: AutofillUserScript,
                                   didRequestAutoFillInitDataForDomain domain: String,
                                   completionHandler: @escaping ([SecureVaultModels.WebsiteAccount],
                                                                 [SecureVaultModels.Identity],
                                                                 [SecureVaultModels.CreditCard],
                                                                 SecureVaultModels.CredentialsProvider) -> Void) {

        do {
            guard let delegate = delegate, delegate.secureVaultManagerIsEnabledStatus(self) else {
                completionHandler([], [], [], credentialsProvider)
                return
            }
            let vault = try self.vault ?? SecureVaultFactory.default.makeVault(errorReporter: self.delegate)
            let identities = try vault.identities()
            let cards = try vault.creditCards()

            getAccounts(for: domain, from: vault, or: passwordManager, withPartialMatches: includePartialAccountMatches) { [weak self] accounts, error in
                guard let self = self else { return }
                if let error = error {
                    os_log(.error, "Error requesting autofill init data: %{public}@", error.localizedDescription)
                    completionHandler([], [], [], self.credentialsProvider)
                } else {
                    completionHandler(accounts, identities, cards, self.credentialsProvider)
                }
            }
        } catch {
            os_log(.error, "Error requesting autofill init data: %{public}@", error.localizedDescription)
            completionHandler([], [], [], credentialsProvider)
        }
    }

    public func autofillUserScript(_: AutofillUserScript, didRequestCreditCardsManagerForDomain domain: String) {
        delegate?.secureVaultManager(self, didRequestCreditCardsManagerForDomain: domain)
    }
    
    public func autofillUserScript(_: AutofillUserScript, didRequestIdentitiesManagerForDomain domain: String) {
        delegate?.secureVaultManager(self, didRequestIdentitiesManagerForDomain: domain)
    }

    public func autofillUserScript(_: AutofillUserScript, didRequestPasswordManagerForDomain domain: String) {
        delegate?.secureVaultManager(self, didRequestPasswordManagerForDomain: domain)
    }

    public func autofillUserScript(_: AutofillUserScript,
                                   didRequestStoreDataForDomain domain: String,
                                   data: AutofillUserScript.DetectedAutofillData) {
        do {

            let autogeneratedCredentials = data.credentials?.autogenerated ?? false
            let shouldSilentlySave = autogeneratedCredentials && data.trigger != .formSubmission

            // Update/Prompt in 3rd party password manager
            if let passwordManager = passwordManager, passwordManager.isEnabled {
                if !shouldSilentlySave {
                    let dataToPrompt = try existingEntries(for: domain, autofillData: data)
                    delegate?.secureVaultManager(self, promptUserToStoreAutofillData: dataToPrompt, withTrigger: data.trigger)
                    partialAccount = nil
                }
                return
            }

            try storeOrUpdateAutogeneratedCredentials(domain: domain, autofillData: data)

            // Prompt to save on form submissions and clean any partial accounts for this instance (tab)
            if !shouldSilentlySave {
                let dataToPrompt = try existingEntries(for: domain, autofillData: data)
                delegate?.secureVaultManager(self, promptUserToStoreAutofillData: dataToPrompt, withTrigger: data.trigger)
                partialAccount = nil
            }

        } catch {
            os_log(.error, "Error storing data: %{public}@", error.localizedDescription)
        }
    }

    public func autofillUserScript(_: AutofillUserScript,
                                   didRequestAccountsForDomain domain: String,
                                   completionHandler: @escaping ([SecureVaultModels.WebsiteAccount],
                                                                 SecureVaultModels.CredentialsProvider) -> Void) {


        do {
            let vault = try self.vault ?? SecureVaultFactory.default.makeVault(errorReporter: self.delegate)
            getAccounts(for: domain, from: vault,
                        or: passwordManager,
                        withPartialMatches: includePartialAccountMatches) { [weak self] accounts, error in
                guard let self = self else { return }
                if let error = error {
                    os_log(.error, "Error requesting accounts: %{public}@", error.localizedDescription)
                    completionHandler([], self.credentialsProvider)
                } else {
                    completionHandler(accounts, self.credentialsProvider)
                }
            }
        } catch {
            os_log(.error, "Error requesting accounts: %{public}@", error.localizedDescription)
            completionHandler([], credentialsProvider)
        }

    }
            
    public func autofillUserScript(_: AutofillUserScript,
                                   didRequestCredentialsForDomain domain: String,
                                   subType: AutofillUserScript.GetAutofillDataSubType,
                                   trigger: AutofillUserScript.GetTriggerType,
                                   completionHandler: @escaping (SecureVaultModels.WebsiteCredentials?, SecureVaultModels.CredentialsProvider, RequestVaultCredentialsAction) -> Void) {
        do {
            let vault = try self.vault ?? SecureVaultFactory.default.makeVault(errorReporter: self.delegate)

            getAccounts(for: domain,
                        from: vault,
                        or: passwordManager,
                        withPartialMatches: includePartialAccountMatches) { [weak self] accounts, error in
                guard let self = self else { return }
                if let error = error {
                    os_log(.error, "Error requesting accounts: %{public}@", error.localizedDescription)
                    completionHandler(nil, self.credentialsProvider, .none)
                }

                let accounts = accounts.filter {
                    // don't show accounts without usernames if the user interacted with the 'username' field
                    if subType == .username && $0.username.isEmpty {
                        return false
                    }
                    return true
                }

                if accounts.count == 0 {
                    os_log(.debug, "Not showing the modal, no suitable accounts found")
                    completionHandler(nil, self.credentialsProvider, .none)
                    return
                }

                self.delegate?.secureVaultManager(self, promptUserToAutofillCredentialsForDomain: domain, withAccounts: accounts, withTrigger: trigger) { [weak self] account in
                    guard let self = self else { return }
                    guard let accountID = account?.id else {
                        completionHandler(nil, self.credentialsProvider, .none)
                        return
                    }

                    self.getCredentials(for: accountID, from: vault, or: self.passwordManager) { [weak self] credentials, error in
                        guard let self = self else { return }
                        if let error = error {
                            os_log(.error, "Error requesting credentials: %{public}@", error.localizedDescription)
                            completionHandler(nil, self.credentialsProvider, .none)
                        } else {
                            completionHandler(credentials, self.credentialsProvider, .fill)
                        }
                    }
                }
            }
        } catch {
            os_log(.error, "Error requesting accounts: %{public}@", error.localizedDescription)
            completionHandler(nil, credentialsProvider, .none)
        }
    }

    public func autofillUserScript(_: AutofillUserScript,
                                   didRequestCredentialsForAccount accountId: String,
                                   completionHandler: @escaping (SecureVaultModels.WebsiteCredentials?, SecureVaultModels.CredentialsProvider) -> Void) {

        do {
            let vault = try self.vault ?? SecureVaultFactory.default.makeVault(errorReporter: self.delegate)
            getCredentials(for: accountId, from: vault, or: self.passwordManager) { [weak self] credentials, error in
                guard let self = self else { return }
                if let error = error {
                    os_log(.error, "Error requesting credentials: %{public}@", error.localizedDescription)
                    completionHandler(nil, self.credentialsProvider)
                } else {
                    completionHandler(credentials, self.credentialsProvider)
                    self.delegate?.secureVaultManager(self, didAutofill: .password, withObjectId: accountId)
                }
            }
        } catch {
            os_log(.error, "Error requesting credentials: %{public}@", error.localizedDescription)
            completionHandler(nil, credentialsProvider)
        }

    }

    public func autofillUserScript(_: AutofillUserScript,
                                   didRequestCreditCardWithId creditCardId: Int64,
                                   completionHandler: @escaping (SecureVaultModels.CreditCard?) -> Void) {
        do {
            let vault = try self.vault ?? SecureVaultFactory.default.makeVault(errorReporter: self.delegate)
            let card = try vault.creditCardFor(id: creditCardId)

            delegate?.secureVaultManager(self, didRequestAuthenticationWithCompletionHandler: { authenticated in
                if authenticated {
                    completionHandler(card)
                } else {
                    completionHandler(nil)
                }
            })
            
            delegate?.secureVaultManager(self, didAutofill: .card, withObjectId: String(creditCardId))
        } catch {
            os_log(.error, "Error requesting credit card: %{public}@", error.localizedDescription)
            completionHandler(nil)
        }
    }

    public func autofillUserScript(_: AutofillUserScript,
                                   didRequestIdentityWithId identityId: Int64,
                                   completionHandler: @escaping (SecureVaultModels.Identity?) -> Void) {
        do {
            let vault = try self.vault ?? SecureVaultFactory.default.makeVault(errorReporter: self.delegate)
            completionHandler(try vault.identityFor(id: identityId))

            delegate?.secureVaultManager(self, didAutofill: .identity, withObjectId: String(identityId))
        } catch {
            os_log(.error, "Error requesting identity: %{public}@", error.localizedDescription)
            completionHandler(nil)
        }
    }

    public func autofillUserScriptDidAskToUnlockCredentialsProvider(_: AutofillUserScript,
                                                                    andProvideCredentialsForDomain domain: String,
                                                                    completionHandler: @escaping ([SecureVaultModels.WebsiteCredentials],
                                                                                                  [SecureVaultModels.Identity],
                                                                                                  [SecureVaultModels.CreditCard],
                                                                                                  SecureVaultModels.CredentialsProvider) -> Void) {
        if let passwordManager = passwordManager, passwordManager.isEnabled {
            passwordManager.askToUnlock { [weak self] in
                passwordManager.websiteCredentialsFor(domain: domain) { [weak self] credentials, error in
                    guard let self = self else { return }
                    if let error = error {
                        os_log(.error, "Error requesting credentials: %{public}@", error.localizedDescription)
                        completionHandler([], [], [], self.credentialsProvider)
                    } else {
                        do {
                            let vault = try self.vault ?? SecureVaultFactory.default.makeVault(errorReporter: self.delegate)
                            let identities = try vault.identities()
                            let cards = try vault.creditCards()
                            completionHandler(credentials, identities, cards, self.credentialsProvider)
                        } catch {
                            os_log(.error, "Error requesting identities or cards: %{public}@", error.localizedDescription)
                            completionHandler([], [], [], self.credentialsProvider)
                        }
                    }
                }
            }
        } else {
            completionHandler([], [], [], credentialsProvider)
        }
    }

    public func autofillUserScript(_: AutofillUserScript, didRequestCredentialsForDomain domain: String, completionHandler: @escaping ([SecureVaultModels.WebsiteCredentials], SecureVaultModels.CredentialsProvider) -> Void) {
        if let passwordManager = passwordManager, passwordManager.isEnabled {
            passwordManager.websiteCredentialsFor(domain: domain) { [weak self] credentials, error in
                guard let self = self else { return }
                if let error = error {
                    os_log(.error, "Error requesting credentials: %{public}@", error.localizedDescription)
                    completionHandler([], self.credentialsProvider)
                } else {
                    completionHandler(credentials, self.credentialsProvider)
                }
            }
        } else {
            // This method is necessary only when using a third party password manager
            assertionFailure("Not implemented")

            completionHandler([], credentialsProvider)
        }
    }

    public func autofillUserScriptDidOfferGeneratedPassword(_: AutofillUserScript, password: String, completionHandler: @escaping (Bool) -> Void) {
        delegate?.secureVaultManager(self,
                                     promptUserWithGeneratedPassword: password) { useGeneratedPassword in
            completionHandler(useGeneratedPassword)
        }
    }
    
    public func autofillUserScript(_: AutofillUserScript, didSendPixel pixel: AutofillUserScript.JSPixel) {
        delegate?.secureVaultManager(self, didReceivePixel: pixel)
    }

    /// Stores autogenerated credentials sent by the AutofillUserScript, or updates an existing row in the database if credentials already exist.
    func storeOrUpdateAutogeneratedCredentials(domain: String, autofillData: AutofillUserScript.DetectedAutofillData) throws {

        guard autofillData.hasAutogeneratedCredentials,
                let autogeneratedCredentials = autofillData.credentials else {
            os_log("Did not meet conditions for silently saving autogenerated credentials, returning early", log: .passwordManager)
            return
        }

        let username = autogeneratedCredentials.username ?? ""
        let passwordData = autogeneratedCredentials.password?.data(using: .utf8) ?? Data()

        let vault = try self.vault ?? SecureVaultFactory.default.makeVault(errorReporter: self.delegate)

        // Create a new partial account
        if partialAccount == nil || partialAccount?.domain != domain {
            partialAccount = createPartialAccount(vault: vault, username: username, password: passwordData, domain: domain)

        // Update the partial account
        } else {
            let accounts = try vault.accountsFor(domain: domain)
            var existingAccount = accounts.first(where: { $0.id == partialAccount?.id })

            // Recreate the partial account if deleted by user
            if existingAccount == nil {
                existingAccount = createPartialAccount(vault: vault, username: username, password: passwordData, domain: domain)
                partialAccount = existingAccount
            }
            guard var account = existingAccount,
                  let id = account.id,
                  let credentials = try? vault.websiteCredentialsFor(accountId: id) else {
                return
            }

            account.username = username != "" ? username : credentials.account.username
            let pwd = passwordData != Data() ? passwordData : credentials.password
            try vault.storeWebsiteCredentials(SecureVaultModels.WebsiteCredentials(account: account, password: pwd))

        }
        return

    }

    private func createPartialAccount(vault: SecureVault, username: String, password: Data, domain: String) -> SecureVaultModels.WebsiteAccount {
        var account = SecureVaultModels.WebsiteAccount(username: username, domain: domain)
        account.id = try? String(vault.storeWebsiteCredentials(SecureVaultModels.WebsiteCredentials(account: account, password: password)))
        return account
    }

    func existingEntries(for domain: String,
                         autofillData: AutofillUserScript.DetectedAutofillData
    ) throws -> AutofillData {
        let vault = try self.vault ?? SecureVaultFactory.default.makeVault(errorReporter: self.delegate)
        
        let proposedIdentity = try existingIdentity(with: autofillData, vault: vault)
        let proposedCredentials: SecureVaultModels.WebsiteCredentials?
        if let passwordManager = passwordManager, passwordManager.isEnabled {
            proposedCredentials = existingCredentialsInPasswordManager(with: autofillData,
                                                                       domain: domain,
                                                                       vault: vault)
        } else {
            proposedCredentials = try existingCredentials(with: autofillData,
                                                          domain: domain,
                                                          vault: vault)
        }

        let proposedCard = try existingPaymentMethod(with: autofillData, vault: vault)
        
        return AutofillData(identity: proposedIdentity,
                            credentials: proposedCredentials,
                            creditCard: proposedCard,
                            automaticallySavedCredentials: autofillData.hasAutogeneratedCredentials)
    }
    
    private func existingIdentity(with autofillData: AutofillUserScript.DetectedAutofillData,
                                  vault: SecureVault) throws -> SecureVaultModels.Identity? {
        if let identity = autofillData.identity, try vault.existingIdentityForAutofill(matching: identity) == nil {
            os_log("Got new identity/address to save", log: .passwordManager)
            return identity
        } else {
            os_log("No new identity/address found, avoid prompting user", log: .passwordManager)
            return nil
        }
    }
    
    private func existingCredentials(with autofillData: AutofillUserScript.DetectedAutofillData,
                                     domain: String,
                                     vault: SecureVault) throws -> SecureVaultModels.WebsiteCredentials? {

        guard let credentials = autofillData.credentials,
            let passwordData = credentials.password?.data(using: .utf8) else {
            return nil
        }

        guard let accounts = try? vault.accountsFor(domain: domain),
              // Matching account (username) or account with empty username for domain
              var account = accounts.first(where: { $0.username == credentials.username || $0.username == "" }) else {
                
                // No existing credentials found.  This is a new entry
                let account = SecureVaultModels.WebsiteAccount(username: credentials.username ?? "", domain: domain)
                return SecureVaultModels.WebsiteCredentials(account: account, password: passwordData)

        }

        guard let existingAccountId = account.id,
              let existingCredentials = try vault.websiteCredentialsFor(accountId: existingAccountId) else {
            return nil
        }

        // Prompt to save on submit autogenerated credentials OR user input that change the existing password
        if autofillData.hasAutogeneratedCredentials || (!autofillData.hasAutogeneratedCredentials && existingCredentials.password != passwordData) {
            return SecureVaultModels.WebsiteCredentials(account: account, password: passwordData)
        }

        // Prompt to update on submit when previous username was empty (the is a partial password account)
        if existingCredentials.account.username == "" {
            account.username = autofillData.credentials?.username ?? ""
            return SecureVaultModels.WebsiteCredentials(account: account, password: passwordData)
        }

        return nil

    }
    
    private func existingPaymentMethod(with autofillData: AutofillUserScript.DetectedAutofillData,
                                       vault: SecureVault) throws -> SecureVaultModels.CreditCard? {
        if let card = autofillData.creditCard, try vault.existingCardForAutofill(matching: card) == nil {
            os_log("Got new payment method to save", log: .passwordManager)
            return card
        } else {
            os_log("No new payment method found, avoid prompting user", log: .passwordManager)
            return nil
        }
    }

    // MARK: - Third-party password manager

    private var credentialsProvider: SecureVaultModels.CredentialsProvider {
        if let passwordManager = passwordManager,
           passwordManager.isEnabled,
           let name = SecureVaultModels.CredentialsProvider.Name(rawValue: passwordManager.name) {
            return SecureVaultModels.CredentialsProvider(name: name,
                                                         locked: passwordManager.isLocked)
        } else {
            return SecureVaultModels.CredentialsProvider(name: .duckduckgo, locked: false)
        }
    }

    private func getAccounts(for domain: String,
                             from vault: SecureVault,
                             or passwordManager: PasswordManager?,
                             withPartialMatches: Bool = false,
                             completion: @escaping ([SecureVaultModels.WebsiteAccount], Error?) -> ()) {
        if let passwordManager = passwordManager,
           passwordManager.isEnabled {
            passwordManager.accountsFor(domain: domain, completion: completion)
        } else {
            do {
                if withPartialMatches {
                    guard let currentUrlComponents = AutofillDomainNameUrlMatcher().normalizeSchemeForAutofill(domain),
                          let tld = tld,
                          let eTLDplus1 = currentUrlComponents.eTLDplus1(tld: tld)
                    else {
                        completion([], nil)
                        return
                    }
                    let accounts = try vault.accountsWithPartialMatchesFor(eTLDplus1: eTLDplus1)
                    completion(accounts, nil)
                } else {
                    let accounts = try vault.accountsFor(domain: domain)
                    completion(accounts, nil)
                }
            } catch {
                completion([], error)
            }
        }
    }

    private func getCredentials(for accountId: String,
                        from vault: SecureVault,
                        or passwordManager: PasswordManager?,
                        completion: @escaping (SecureVaultModels.WebsiteCredentials?, Error?) -> Void) {
        if let passwordManager = passwordManager,
           passwordManager.isEnabled {
            passwordManager.websiteCredentialsFor(accountId: accountId, completion: completion)
        } else {
            do {
                let credentials = try vault.websiteCredentialsFor(accountId: accountId)
                completion(credentials, nil)
            } catch {
                completion(nil, error)
            }
        }
    }


    private func existingCredentialsInPasswordManager(with autofillData: AutofillUserScript.DetectedAutofillData,
                                                      domain: String,
                                                      vault: SecureVault) -> SecureVaultModels.WebsiteCredentials? {
        guard let passwordManager = passwordManager, passwordManager.isEnabled else {
            return nil
        }

        guard let credentials = autofillData.credentials,
              let passwordData = credentials.password?.data(using: .utf8) else {
            return nil
        }

        guard let existingCredentials = passwordManager.cachedWebsiteCredentialsFor(domain: domain,
                                                                                    username: credentials.username ?? "") else {
            // No existing credentials found and not auto-generated, so return a new entry
            let account = SecureVaultModels.WebsiteAccount(username: credentials.username ?? "", domain: domain)
            return SecureVaultModels.WebsiteCredentials(account: account, password: passwordData)

        }

        // Prompt to save on submit autogenerated credentials OR user input that change the existing password
        if autofillData.hasAutogeneratedCredentials || (!autofillData.hasAutogeneratedCredentials && existingCredentials.password != passwordData) {
            return SecureVaultModels.WebsiteCredentials(account: existingCredentials.account, password: passwordData)
        }

        return nil
    }

}

fileprivate extension SecureVault {

    func websiteCredentialsFor(accountId: String) throws -> SecureVaultModels.WebsiteCredentials? {
        guard let accountIdInt = Int64(accountId) else {
            assertionFailure("Bad account id format")
            return nil
        }

        return try websiteCredentialsFor(accountId: accountIdInt)
    }

}
